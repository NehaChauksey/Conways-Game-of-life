
var rows = 40,
cols = 30,
playing = false;

var grid = new Array(rows);
var newGrid = new Array(rows);
var timer;

function initializeGrid(){
for(var i=0; i<rows; i++){
	grid[i] = new Array(cols);
  newGrid[i] = new Array(cols);
	}
}

function resetGrid() {
	for(var i=0; i<rows; i++){
		for(var j=0; j<cols; j++){
			grid[i][j] = 0;
			newGrid[i][j] = 0;
			
		}
	}
}

function copy(){
	for(var i=0; i<rows; i++){
		for(var j=0; j<cols; j++){
			grid[i][j] = newGrid[i][j];
			newGrid[i][j] = 0;
		}
		}
}

function initialize(){
  createGrid();
  initializeGrid();
  resetGrid();
  startAndClear();
}

function createGrid(){
var container = document.getElementById("container");
  var matrix = document.createElement("div");
  matrix.setAttribute("class","gridDisplay");
  console.log("rows count", rows);
  for(var i=0; i<rows;i++){
    var matRow = document.createElement("div");
    matRow.setAttribute("class","matR");
    for(var j = 0;j<cols;j++){
      var chldRow = document.createElement("div");
      chldRow.setAttribute("class","chR_off");
      var id = i+ "," + j;
      chldRow.setAttribute("id",id);
      chldRow.addEventListener("click",onCLickHandler);
      matRow.appendChild(chldRow);
    }
    matrix.appendChild(matRow);
	}
  container.appendChild(matrix);
}

function onCLickHandler(oEvent) {
var block = this.id.split(",");
var i = block[0];
var j = block[1];
 if(this.getAttribute("class") === "chR_off"){
		this.setAttribute("class", "chR_on");
    grid[i][j] = 1;
 }
 else {
 this.setAttribute("class","chR_off");
 grid[i][j] = 0;
 }
 }
 
function clearButtonHandler() {
    
    playing = false;
    var startButton = document.getElementById('start');
    startButton.innerHTML = "Start";    
    clearTimeout(timer);
    
    var gridArr = document.getElementsByClassName("chR_on");
    
    var arr = [];
    for (var i = 0; i < gridArr.length; i++) {
        arr.push(gridArr[i]);
    }    
    for (var i = 0; i < arr.length; i++) {
        arr[i].setAttribute("class", "chR_off");
    }
    resetGrid();
}

function randomButtonHandler() {
    if (playing) return;
    clearButtonHandler();
    for (var i = 0; i < rows; i++) {
        for (var j = 0; j < cols; j++) {
            var isOn = Math.round(Math.random());
            if (isOn == 1) {
                var cell = document.getElementById(i + "," + j);
                cell.setAttribute("class", "chR_on");
                grid[i][j] = 1;
            }
			else {
				var cell = document.getElementById(i + "," + j);
                cell.setAttribute("class", "chR_off");
                grid[i][j] = 0;
			}
        }
    }
	playing = true;
	play();
}

function startButtonHandler() {
    if (playing) {
        playing = false;
        this.innerHTML = "Continue";
        clearTimeout(timer);
    } else {
        playing = true;
        this.innerHTML = "Pause";
        play();
    }
}
function startAndClear() {
    var startButton = document.getElementById('start');
    startButton.onclick = startButtonHandler;
    
    var clearButton = document.getElementById('clear');
    clearButton.onclick = clearButtonHandler;
    var randomButton = document.getElementById('random');
    randomButton.onclick = randomButtonHandler;
}
function play() {
    compute();
    
    if (playing) {
        timer = setTimeout(play, 10);
    }
}

function updateView() {
  for (var i = 0; i < rows; i++) {
    for (var j = 0; j < cols; j++) {
      var block = document.getElementById(i + "," + j);
      if (grid[i][j] == 0) {
        block.setAttribute("class", "chR_off");
      } else {
        block.setAttribute("class", "chR_on");
      }
    }
  }
}
 
 function compute() {
    for (var i = 0; i < rows; i++) {
        for (var j = 0; j < cols; j++) {
            changeColorRules(i, j);
        }
    }
    copy();
    updateView();
}

function rulesDescription(i,j) {
 var count = 0;
 if(i-1 >=0){
 	if(grid[i-1][j] == 1)
	count++;
 }
  if(i-1>=0 && j-1 ==0){
  	if(grid[i-1][j-1] >= 1)
  	count++;
  }
  if(i-1 >= 0 && j+1 <cols){
    if(grid[i-1][j+1] == 1)
    count++;
  }  
 if(j-1>=0){
 	if(grid[i][j-1] == 1)
 	count++;
 }
 if (j+1 < cols) {
   if (grid[i][j+1] == 1) 
   count++;
 }
   if (i+1 < rows) {
     if (grid[i+1][j] == 1) 
     count++;
   }
   if (i+1 < rows && j-1 >= 0) {
     if (grid[i+1][j-1] == 1) 
     count++;
   }
   if (i+1 < rows && j+1 < cols) {
     if (grid[i+1][j+1] == 1) 
     count++;
   } 
  
  return count;
 
 }
 
 function changeColorRules(i,j){
 	var neighbors = rulesDescription(i, j);
    if (grid[i][j] == 1) {
        if (neighbors < 2) {
            newGrid[i][j] = 0;
        } else if (neighbors == 2 || neighbors == 3) {
            newGrid[i][j] = 1;
        } else if (neighbors > 3) {
            newGrid[i][j] = 0;
        }
    } else if (grid[i][j] == 0) {
            if (neighbors == 3) {
                newGrid[i][j] = 1;
            }
        }
}


initialize();